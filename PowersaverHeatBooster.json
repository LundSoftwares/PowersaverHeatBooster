[{"id":"9646f65a50659b71","type":"subflow","name":"Powersaver Boost Offset","info":"This Subflow creates a \"Booster sensor\" to be used with the Powersaver Nodes.\r\n\r\nIn short: \r\nIf you want to boost the heater just before a longer OFF period, set your desired Offset and\r\nthe output will give you a True value if \"Start time for next OFF period\" Minus \"Time now\" is \r\nwithin the offset, and the OFF period is equal or bigger than the Min OFF Hour value.\r\n\r\nExample:\r\nNext OFF period is 5 hours long and starts at 17:00, Offset and Min OFF hours is both is set to 3 hours. \r\nBetween 14:00 and 17:00, the output is True, before and after the value is False.\r\nIf the OFF period was only 2 hours long, the value will be Off all the time and no heater boost will be generated.\r\n\r\nHow to:\r\nConnect the Input to the Schedule Output on one of the Powersaver nodes (Lowest Price and Best Save only!)\r\nSet you desired offset and Min OFF Hours, default is 3 hours. \r\nPreferably connect the Output to a HomeAssistant Entity node set to Binary Sensor.","category":"","in":[{"x":70,"y":80,"wires":[{"id":"b8a4c33b70b217c3"}]}],"out":[{"x":580,"y":80,"wires":[{"id":"2d53f71906ab5725","port":0}]}],"env":[{"name":"offset","type":"num","value":"3","ui":{"icon":"font-awesome/fa-clock-o","label":{"en-US":"Hours Offset"},"type":"input","opts":{"types":["num"]}}},{"name":"minhours","type":"num","value":"3","ui":{"icon":"font-awesome/fa-clock-o","label":{"en-US":"Min OFF Hours"},"type":"input","opts":{"types":["num"]}}}],"meta":{},"color":"#DDAA99"},{"id":"b8a4c33b70b217c3","type":"change","z":"9646f65a50659b71","name":"Set Offset","rules":[{"t":"set","p":"payload.offset","pt":"msg","to":"offset","tot":"env"},{"t":"set","p":"payload.minhours","pt":"msg","to":"minhours","tot":"env"}],"action":"","property":"","from":"","to":"","reg":false,"x":230,"y":80,"wires":[["2d53f71906ab5725"]]},{"id":"2d53f71906ab5725","type":"function","z":"9646f65a50659b71","name":"Find Offset Hour","func":"var boostOffset = msg.payload.offset\nvar minHours = msg.payload.minhours\nvar time\nvar status = false\nfor (let index = 0; index < msg.payload.schedule.length; index++) {\n    if (msg.payload.schedule[index].value == false)\n    {\n        let timestamp = new Date(msg.payload.schedule[index].time)\n        let now = new Date()\n        if (now.getDay() == timestamp.getDay() && now.getMonth() == timestamp.getMonth() && now.getFullYear() == timestamp.getFullYear()) {\n          if (timestamp.getHours() - now.getHours() <= boostOffset && timestamp.getHours() - now.getHours() >= 1) \n            { \n            if (msg.payload.schedule[index].countHours >= minHours)\n              {\n              status = true \n              break\n              }\n            else \n              {\n              status = false\n              }\n            }\n            else \n            { \n              status = false \n            }\n        } \n    }\n}\n\nmsg.payload = status\nreturn msg;","outputs":1,"noerr":0,"initialize":"","finalize":"","libs":[],"x":420,"y":80,"wires":[[]]},{"id":"9f86486a6be00dee","type":"subflow:9646f65a50659b71","z":"5c6241124b106109","name":"","x":1060,"y":1640,"wires":[["7b61c9aa8b659179"]]}]